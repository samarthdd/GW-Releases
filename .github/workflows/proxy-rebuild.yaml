# This is a basic workflow to help you get started with Actions

name: proxy-rebuild
env:
  AWS_DEFAULT_REGION: eu-west-1
# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
    inputs:
      icap_server_ip: 
        description: "IP address of ICAP server to be used in proxy server"
        default: 54.155.107.189
        required: true
      extra_regions:
        description: Extra regions where AMI should be published. Pass multiple regions with comma separated.
        default: eu-west-1
        required: false
      monitoring_ip:
        description: IP address of Monitoring server
        default: 52.30.24.9
        required: true
  push:
    branches: [ main ]
    paths-ignore:
      - 'aws-jmeter-test-engine'
      - 'gp-load-balancer'
      - 'GW-proxy'
      - 'icap-infrastructure'
      - 'k8-rebuild'
      - '.github/workflows/k8-rebuild.yaml'
      - '.github/workflows/icap-server.yaml'
      - '.github/workflows/proxy-rebuild-ova.yaml'
      - '.github/workflows/haproxy.yaml'
      - '.github/workflows/monitoring.yaml'
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-ami:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it  
    - uses: actions/checkout@v2
      with:
        submodules: true

    # - name: Update submodules
    #   run: |
    #     git submodule foreach git fetch
    #     git submodule foreach git pull origin main

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    # build artifact
    - name: Setup Packer
      run: |
        cd vmware-scripts/packer
        curl -o packer.zip https://releases.hashicorp.com/packer/1.6.6/packer_1.6.6_linux_amd64.zip
        unzip -o packer.zip
        sudo mv packer /usr/local/bin
        
    - name: Build AMI
      run: |
        cd vmware-scripts/packer
        cp -r target/proxy-rebuild/* setup/
        cat > setup/env <<EOF
        MONITORING_IP=${{ github.event.inputs.monitoring_ip }}
        ICAP_IP=${{ github.event.inputs.icap_server_ip }}
        EOF
        RANDOM_STR=${{ github.sha }}-${{ github.run_number }}
        packer build -color=false -on-error=cleanup -var github_sha=${RANDOM_STR} -var vm_name=proxy-rebuild -var region=${{ env.AWS_DEFAULT_REGION }} -var extra_regions=${{ github.event.inputs.extra_regions }} -var aws_access_key=${{ secrets.AWS_ACCESS_KEY }} -var aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }} -var elastic_host=${{ github.event.inputs.monitoring_ip }} -var elastic_port=9200 -var elastic_user=${{ secrets.MONITORING_USER }} -var elastic_password=${{ secrets.MONITORING_PASSWORD }} aws-ami.json

  deploy-ami:
    runs-on: ubuntu-latest
    needs: build-ami
    steps:
      - name: Get the current instance id
        id: get_id
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
        run: |
          # instance_id="${{ steps.deploy.outputs.instance_id }}"
          instance_id=$(aws ec2 describe-instances --filters 'Name=tag:Name,Values=dev-proxy-rebuild' "Name=instance-state-name,Values=running" --output text --query 'Reservations[*].Instances[*].InstanceId')
          echo ::set-output name=instance_id::$instance_id
          
      - name: Deploy AMI to dev
        id: deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
        run: |
          RANDOM_STR=${{ github.sha }}-${{ github.run_number }}
          ami_id=$(aws ec2 describe-images --filters "Name=name,Values=proxy-rebuild-${RANDOM_STR}" --query 'Images[*].[ImageId]' --output text)
          result=$(aws ec2 run-instances --image-id $ami_id --count 1 --instance-type t2.large --key-name packer --security-group-ids sg-0120400d5eefb0b9e --tag-specifications 'ResourceType=instance, Tags=[{Key=Name,Value=dev-proxy-rebuild}, {Key=Delete,Value=No},{Key=Scope,Value=icap-server}, {Key=Team, Value=k8-proxy/proxy-rebuild}, {Key=Owner, Value=githubactionAMIpacker}, {Key=AMI_Name, Value=proxy-rebuild-${{ github.sha }}}]')
          sleep 12m
          instance_id=$(echo $result | jq -r ".Instances[0].InstanceId")
          echo "$instance_id is created."
          instance_description=$(aws ec2 describe-instances --instance-ids $instance_id)
          instance_state=$(echo $instance_description | jq -r ".Reservations[0].Instances[0].State.Name")
          echo "Instance state is $instance_state"
          if [[ "$instance_state" != "running" ]];then
              echo "EC2 instance $instance_id created from AMI has failed to start in time, terminating the instance." 
              aws ec2 terminate-instances --instance-ids $instance_id
              exit -1
          fi
          instance_ip=$(echo $instance_description | jq -r ".Reservations[0].Instances[0].PublicIpAddress")
          echo "Add the IP to the hosts file: ${instance_ip}"
          echo ::set-output name=instance_ip::$instance_ip
          echo ::set-output name=instance_id::$instance_id
          echo ::set-output name=ami_id::$ami_id

      - name: Run tests on the VM
        id: test
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
        run: |
          instance_id="${{ steps.deploy.outputs.instance_id }}"
          instance_ip="${{ steps.deploy.outputs.instance_ip }}"
          ami_id="${{ steps.deploy.outputs.ami_id }}"
          curl -kv https://glasswallsolutions.com/wp-content/uploads/2020/01/Glasswall-d-FIRST-Technology.pdf --resolve "glasswallsolutions.com:443:$instance_ip" --output Glasswall-d-FIRST-Technology.pdf
          cat Glasswall-d-FIRST-Technology.pdf | grep "Glasswall Processed"
          test_result=$?
          if [[ $test_result -ne 0 ]];then
            echo "Proxy test failed"
            echo ::set-output name=test_result::$test_result
          else
            echo "Tests are successfully on the new instance, terminating old instance."
            aws ec2 create-tags --resources $ami_id --tags Key=Test_Result,Value=Success
            instance_id="${{ steps.get_id.outputs.instance_id }}"
            if [[ ! -z "$instance_id" ]]; then
              echo "$instance_id" | while IFS= read -r line ; do aws ec2 terminate-instances --instance-ids $line || true; done
            fi
          fi
      - name: Delete instance if tests fail
        if: ${{ failure() }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
        run: |
          test_result="${{ steps.test.outputs.test_result }}"
          if [[ $test_result != "0" ]];then
            echo "Failed integration tests, terminating the newly deployed VM"
            instance_id="${{ steps.deploy.outputs.instance_id }}"
            ami_id="${{ steps.deploy.outputs.ami_id }}"
            aws ec2 terminate-instances --instance-ids $instance_id
            aws ec2 create-tags --resources $ami_id --tags Key=Test_Result,Value=Failed
          fi
          exit $test_result
